REM >!Clipper
REM
REM Copyright 2020, Stephen Fryatt (info@stevefryatt.org.uk)
REM
REM This file is part of Clipper:
REM
REM   http://www.stevefryatt.org.uk/software/
REM
REM Licensed under the EUPL, Version 1.1 only (the "Licence");
REM You may not use this work except in compliance with the
REM Licence.
REM
REM You may obtain a copy of the Licence at:
REM
REM   http://joinup.ec.europa.eu/software/page/eupl
REM
REM Unless required by applicable law or agreed to in
REM writing, software distributed under the Licence is
REM distributed on an "AS IS" basis, WITHOUT WARRANTIES
REM OR CONDITIONS OF ANY KIND, either express or implied.
REM
REM See the Licence for the specific language governing
REM permissions and limitations under the Licence.

LIBRARY "BASIC:Icon"
LIBRARY "BASIC:Menu"
LIBRARY "BASIC:Message"
LIBRARY "BASIC:Resources"
LIBRARY "BASIC:String"
LIBRARY "BASIC:Template"
LIBRARY "BASIC:Url"
LIBRARY "BASIC:WimpError"
LIBRARY "BASIC:Window"

LIBRARY "src/Clipboard.bbt"
LIBRARY "src/InfoWind.bbt"
LIBRARY "src/MainWind.bbt"
LIBRARY "src/Types.bbt"

REM Set up the basic error handling, then initialise.

PROCwimperror_initialise("Clipper", "!clipper")
ON ERROR result% = FNwimperror_program : END

ClipperTaskHandle% = -1

PROCclipper_initialise

REM Poll the Wimp until exit.

Quit%=FALSE

ON ERROR Quit% = FNwimperror_program

WHILE NOT Quit%
	PROCclipper_poll
ENDWHILE

IF ClipperTaskHandle% <> -1 THEN SYS "Wimp_CloseDown", ClipperTaskHandle%, !TASK
END


REM Handle calls to Wimp_Poll and process the responses.
:
DEF PROCclipper_poll
LOCAL reason%

SYS "Wimp_Poll", %110001, b% TO reason%

CASE reason% OF
	WHEN 2:		SYS "Wimp_OpenWindow",,b%
	WHEN 3:		SYS "Wimp_CloseWindow",,b%
	WHEN 6:		IF b%!8 <> 2 THEN PROCclipper_mouse_click ELSE PROCclipper_menu
	WHEN 7:		PROCmain_window_drag_box
	WHEN 8:		IF b%!24=13 THEN
				PROCclipboard_save_data(FNmain_wind_get_filename, TRUE, FALSE)
			ELSE
				IF b%!24 = &1B THEN
					PROCmain_wind_close
				ELSE
					SYS "Wimp_ProcessKey", b%!24
				ENDIF
			ENDIF
	WHEN 9 :	IF b%!0 = 1 THEN OSCLI("Filer_Run <Clipper$Dir>.!Help")
			IF b%!0 = 2 THEN Quit%=TRUE
	WHEN 17,18 :	PROCclipper_process_message
	WHEN 19 :	PROCclipper_process_bounce
ENDCASE
ENDPROC


REM Handle mouse clicks in Clipper windows.
:
DEF PROCclipper_mouse_click
CASE b%!12 OF
WHEN -2
	PROCmain_window_toggle
	PROCclipboard_examine

WHEN MainWindHandle%
	PROCmain_wind_click(b%!8, b%!16)

WHEN InfoWindHandle%
	PROCinfo_wind_click(b%!8, b%!16)
ENDCASE
ENDPROC


REM Handle menu clicks in Clipper windows.
:
DEF PROCclipper_menu
IF b%!12 = -2 THEN
	PROCmenu_create_iconbar(IconbarMenu%, b%!0)
ELSE
	PROCmenu_create(IconbarMenu%, b%!0, b%!4)
ENDIF
ENDPROC


REM Handle incoming Wimp messages.
REM On entry, b% is assumed to point to the Wimp_Poll block.
:
DEF PROCclipper_process_message
CASE b%!16 OF
	WHEN 0		: Quit%=TRUE : REM Message_Quit
	WHEN 1		: PROCclipboard_message_data_save
	WHEN 2		: PROCclipboard_message_data_save_ack
	WHEN 3		: PROCclipboard_message_data_load
	WHEN 4		: PROCclipboard_message_data_load_ack
	WHEN &F		: PROCclipboard_message_claim_entity
	WHEN &10	: PROCclipboard_message_data_request
ENDCASE
ENDPROC


REM Handle boinced Wimp messages.
REM On entry, b% is assumed to point to the Wimp_Poll block.
:
DEF PROCclipper_process_bounce
CASE b%!16 OF
	WHEN 4			: PROCclipboard_message_data_load_ack_bounce
	WHEN &4E383, &4AF80	: PROCurl_bounce(b%) : REM Message_URIReturnResult, Message_InetSuiteOpenURL
	OTHERWISE		: PROCclipboard_message_bounce
ENDPROC


REM Initialise Clipper, both internally and with the Wimp.
:
DEF PROCclipper_initialise
DIM b% 1024, q% 256, a% 255

REM Locate the application resources.

Resources$ = FNresources_find_territory_folder("<Clipper$Dir>.Resources")

REM Load the messages file.

PROCmessage_initialise(Resources$ + "Messages")

TaskName$ = FNmessage_lookup("TaskName")
TaskSprite$ = FNmessage_lookup("TaskSpr")
PROCwimperror_initialise(TaskName$, TaskSprite$)

DIM TASK 5
$TASK="TASK"
SYS "Wimp_Initialise", 200, !TASK, TaskName$ TO ,ClipperTaskHandle%

PROCtemplate_open(Resources$ + "Templates")
PROCinfo_wind_initialise
PROCmain_wind_initialise
PROCtemplate_close

REM Create the iconbar icon

b%!0 = -1
b%!4 = 0
b%!8 = 0
b%!12 = 76
b%!16 = 68
b%!20 = %11000000011010
$(b%+24) = TaskSprite$
SYS "Wimp_CreateIcon",,b%

OurFile$ = ""
SaveRef% = -1
SaveDragRef% = -1

REM Initialise and load the menu templates

PROCmenu_initialise

b%!0 = InfoWindHandle%
PROCmenu_load_templates(Resources$ + "Menus", b%)
IconbarMenu% = b%!0

REM Initialise the clipboard monitor.

PROCclipboard_initialise

PROCclipboard_examine
ENDPROC
